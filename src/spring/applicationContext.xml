<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task-3.1.xsd ">

<!-- 加载配置文件 -->
<context:property-placeholder location="classpath:db.properties,classpath:redis.properties"/>

<!-- 数据库连接池 -->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" >
    <!-- 基本属性 url、user、password -->
	<property name="url" value="${druid.url}" />
	<property name="username" value="${druid.username}" />
	<property name="password" value="${druid.password}" />
	<property name="driverClassName" value="${druid.driverClassName}" />
	<!-- 配置初始化大小、最小、最大 -->
   	<property name="initialSize" value="${druid.initialSize}"/>
   	<property name="minIdle" value="${druid.minIdle}"/>
   	<property name="maxActive" value="${druid.maxActive}"/>
   	<!-- 配置获取连接等待超时的时间 -->
   	<property name="maxWait" value="${druid.maxWait}"/>
   	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
   	<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
   	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
   	<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
   	<!-- 验证连接有效与否的SQL，不同的数据配置不同 --> 
   	<property name="validationQuery" value="${druid.validationQuery}" />
   	<property name="testWhileIdle" value="${druid.testWhileIdle}" />
   	<!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
   	<property name="testOnBorrow" value="${druid.testOnBorrow}" />
   	<property name="testOnReturn" value="${druid.testOnReturn}" />
   	<!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
   	<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
    <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
   	<!-- 配置监控统计拦截的filters -->
   	<property name="filters" value="${druid.filters}" />
</bean>

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
</bean>

<!-- 事务管理器 -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<!-- 数据源 -->
	<property name="dataSource" ref="dataSource"/>
</bean>
<!-- 定时任务删除导出生成的excel文件 -->
<bean id="taskJob" class="com.hlic.base.process.task.TaskJob" />
<task:scheduled-tasks>
    <task:scheduled ref="taskJob" method="deleteImportExcel" cron="1 * * * * ?" />
</task:scheduled-tasks>

<!-- 通知 -->
<tx:advice id="txAdvice" transaction-manager="transactionManager">
  <tx:attributes>
     <!-- 传播行为 -->
    <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
    <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
    <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
  </tx:attributes>
</tx:advice>

<!-- 切面 -->
<aop:config proxy-target-class="true">
  <aop:advisor advice-ref="txAdvice"
  pointcut="execution(* com.hlic.*.service.impl.*.*(..))"/>
</aop:config>
<!-- Spring 统一日志处理   LogInterceptor拦截器 配置　-->     
<!-- <bean id="logLnterceptor" class="com.hlic.utils.LogInterceptor"/>  --> 
<!-- Spring 统一异常处理  ExceptionAdvisor配置 -->  
<bean id="exceptionHandler" class="com.hlic.utils.ExceptionAdvisor"></bean>
<aop:config>
    <aop:pointcut id="exceptionTrade" expression="execution(* com.hlic.base.service.*.*(..))" />
    <aop:advisor pointcut-ref="exceptionTrade" advice-ref="exceptionHandler"/>
</aop:config>
    <!-- Bean自动代理处理器 配置-->    
<!-- <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator" >  
   <property name="beanNames">  
    <list>    配置需要进行日志记录的Service和Dao  
        <value>*Action</value>  
                配置所有Service结尾命名的Bean，即所有Service层的类都要经过exceptionHandler异常处理类   
        <value>*Service</value>  Service层的Bean ID 命名要以Service结尾  
    </list>  
   </property>  
   <property name="interceptorNames">  
    <list>  
         <value>exceptionHandler</value>  
         <value>logLnterceptor</value>  
         <value>transactionInterceptor</value>  
    </list>  
   </property>  
</bean>   -->

<!-- 导入相关配置 -->
<import resource="classpath:activiti.cfg.xml"/> 
<!-- 引入同文件夹下的redis属性配置文件 -->
<import resource="classpath:redis/redis-context.xml"/>
</beans>